diff --git a/.devcontainer/devcontainer.json b/.devcontainer/devcontainer.json
index b0c3b1b..698186b 100644
--- a/.devcontainer/devcontainer.json
+++ b/.devcontainer/devcontainer.json
@@ -2,6 +2,6 @@
   "name": "Retrospective",
   "dockerFile": "Dockerfile",
   "appPort": 8080,
-  "extensions": ["dbaeumer.vscode-eslint"],
+  "extensions": ["dbaeumer.vscode-eslint", "prettier/prettier"],
   "postCreateCommand": "yarn install"
 }
diff --git a/src/components/App.tsx b/src/components/App.tsx
index eae2176..ed41229 100644
--- a/src/components/App.tsx
+++ b/src/components/App.tsx
@@ -3,6 +3,7 @@ import { Provider } from 'react-redux';
 import store from '../store';
 import Player from '../containers/PlayerContainer';
 import TagTableContainer from '../containers/TagTableContainer';
+import NewTagButton from '../containers/NewTagButton';
 
 const App = (): JSX.Element => (
   <Provider store={store}>
@@ -13,6 +14,7 @@ const App = (): JSX.Element => (
           <Player />
         </div>
         <div className="column is-4">
+          <NewTagButton />
           <TagTableContainer />
         </div>
       </div>
diff --git a/src/components/ControlPanel.tsx b/src/components/ControlPanel.tsx
index efcf5e1..7958e04 100644
--- a/src/components/ControlPanel.tsx
+++ b/src/components/ControlPanel.tsx
@@ -1,13 +1,10 @@
 import React from 'react';
 import PlayButton from '../containers/PlayButton';
-import NewTagButton from '../containers/NewTagButton';
-import SeekBarContainer from '../containers/SeekBarContainer';
+
 
 const ControlPanel = (): JSX.Element => (
   <div>
     <PlayButton />
-    <NewTagButton />
-    <SeekBarContainer />
   </div>
 );
 export default ControlPanel;
diff --git a/src/components/Player.tsx b/src/components/Player.tsx
index 9322837..37dad02 100644
--- a/src/components/Player.tsx
+++ b/src/components/Player.tsx
@@ -3,19 +3,20 @@ import ControlPanel from './ControlPanel';
 import VideoContainer from '../containers/VideoContainer';
 import NewTagLayerContainer from '../containers/NewTagLayerContainer';
 import AugmentationContainer from '../containers/AugmentationContainer';
+import SeekBar from './SeekBar';
 
 interface Props {
   placeNewTagMode: boolean;
 }
 
 class Player extends React.Component<Props, {}> {
-  public componentDidMount(): void {}
+  public componentDidMount(): void { }
 
   public render(): JSX.Element {
     const { placeNewTagMode } = this.props;
 
-    let newTagComponent = null;
-    if (placeNewTagMode) newTagComponent = <NewTagLayerContainer />;
+    let newTagLayerComponent = null;
+    if (placeNewTagMode) newTagLayerComponent = <NewTagLayerContainer />;
 
     return (
       <div>
@@ -23,8 +24,9 @@ class Player extends React.Component<Props, {}> {
           <div className="augmented-video">
             <VideoContainer />
             <AugmentationContainer />
-            {newTagComponent}
+            {newTagLayerComponent}
           </div>
+          <SeekBar />
           <ControlPanel />
         </div>
       </div>
diff --git a/src/components/SeekBar.tsx b/src/components/SeekBar.tsx
index e21e661..5924e25 100644
--- a/src/components/SeekBar.tsx
+++ b/src/components/SeekBar.tsx
@@ -1,39 +1,18 @@
 import React from 'react';
+import SeekBarCurrentTimeSlider from '../containers/SeekBarCurrentTimeSlider';
 
-type onSeekFunc = (currentTime: number) => void;
 
-interface Props {
-  currentTime: number;
-  duration: number;
-  onSeek: onSeekFunc;
-  onMouseDown: () => void;
-  onMouseUp: () => void;
-}
 
-function createOnChange(
-  onSeek: onSeekFunc
-): (event: React.ChangeEvent<HTMLInputElement>) => void {
-  return (event: React.ChangeEvent<HTMLInputElement>): void => {
-    const value = parseInt(event.target.value, 10);
-    onSeek(value);
-  };
-}
+const SeekBar = (): JSX.Element => (
+
+    <div className="box seek-bar-box">
+        <div className="ribbon"></div>
+        <div id="seek-bounds" className="slider-ribbon">
+            <SeekBarCurrentTimeSlider />
+        </div>
+    </div>
+
+
 
-const SeekBar = ({
-  currentTime,
-  duration,
-  onSeek,
-  onMouseDown,
-  onMouseUp
-}: Props): JSX.Element => (
-  <input
-    type="range"
-    min={0}
-    max={duration}
-    value={currentTime}
-    onChange={createOnChange(onSeek)}
-    onMouseDown={onMouseDown}
-    onMouseUp={onMouseUp}
-  />
 );
 export default SeekBar;
diff --git a/src/components/SeekBarSlider.tsx b/src/components/SeekBarSlider.tsx
new file mode 100644
index 0000000..580b640
--- /dev/null
+++ b/src/components/SeekBarSlider.tsx
@@ -0,0 +1,91 @@
+import React from 'react';
+import {
+  Interactivity,
+  updateInteractivity
+} from '../interactivity/slider-interactivity';
+import {
+  InteractivityProps,
+  DEFAULT_TAG_INTERACTIVITY_PROPS,
+  updateDraggable,
+  updateOnDrag,
+  updateOnDragBegin,
+  updateOnDragEnd
+} from '../interactivity/slider-interactivity-props';
+
+type onSeekFunc = (currentTime: number) => void;
+
+interface Props {
+  position: number;
+  className: string;
+  onSeek: onSeekFunc;
+  userSeek: boolean;
+  onMouseDown: () => void;
+  onMouseUp: () => void;
+}
+
+class SeekBarSlider extends React.Component<Props, {}> {
+  public constructor(props: Props) {
+    super(props);
+
+    this.interactivityProps = DEFAULT_TAG_INTERACTIVITY_PROPS;
+  }
+
+  public componentDidMount(): void {
+    this.interactivity = { draggable: undefined };
+
+    this.interactivity = updateInteractivity(
+      this.prevInteractivityProps,
+      this.interactivityProps
+    )(this.interactivity);
+  }
+
+  private interactivityProps: InteractivityProps;
+
+  private interactivity: Interactivity;
+
+  private prevInteractivityProps: InteractivityProps;
+
+  private postion: number;
+
+  public render(): JSX.Element {
+    const {
+      className,
+      position,
+      userSeek,
+      onMouseDown: onDragBegin,
+      onMouseUp: onDragEnd,
+      onSeek: onDrag
+    } = this.props;
+
+    this.prevInteractivityProps = this.interactivityProps;
+
+    this.interactivityProps = updateDraggable(this.interactivityProps, true);
+
+    this.interactivityProps = updateOnDragBegin(
+      this.interactivityProps,
+      onDragBegin
+    );
+    this.interactivityProps = updateOnDrag(this.interactivityProps, onDrag);
+    this.interactivityProps = updateOnDragEnd(
+      this.interactivityProps,
+      onDragEnd
+    );
+
+    const p = userSeek ? this.postion : position;
+
+    return (
+      <div
+        {...{ className }}
+        style={{ left: `${p}%` }}
+        ref={(slider: HTMLDivElement): void => {
+          this.interactivityProps = {
+            ...this.interactivityProps,
+            target: slider
+          };
+        }}
+      />
+    );
+  }
+}
+
+export default SeekBarSlider;
diff --git a/src/components/Tag.tsx b/src/components/Tag.tsx
index 3f5607d..5c66790 100644
--- a/src/components/Tag.tsx
+++ b/src/components/Tag.tsx
@@ -2,7 +2,7 @@ import React from 'react';
 import {
   Interactivity,
   updateInteractivity
-} from '../tag-interactivity/tag-interactivity';
+} from '../interactivity/tag-interactivity';
 import {
   DEFAULT_TAG_INTERACTIVITY_PROPS,
   updateCurrentTime,
@@ -14,7 +14,7 @@ import {
   updatePath,
   InteractivityProps,
   OnDragFunc
-} from '../tag-interactivity/tag-interactivity-props';
+} from '../interactivity/tag-interactivity-props';
 
 interface Props {
   x: number;
diff --git a/src/containers/SeekBarContainer.tsx b/src/containers/SeekBarContainer.tsx
deleted file mode 100644
index d798fd3..0000000
--- a/src/containers/SeekBarContainer.tsx
+++ /dev/null
@@ -1,36 +0,0 @@
-import React from 'react';
-import { connect } from 'react-redux';
-import store from '../store';
-import SeekBar from '../components/SeekBar';
-import { setCurrentTime, setUserSeek } from '../actionCreators';
-import { State } from '../types/state';
-
-interface Props {
-  duration: number;
-  currentTime: number;
-}
-
-function onSeek(currentTime: number): void {
-  store.dispatch(setCurrentTime(currentTime));
-}
-
-function onMouseDown(): void {
-  store.dispatch(setUserSeek(true));
-}
-
-function onMouseUp(): void {
-  store.dispatch(setUserSeek(false));
-}
-
-const PlayButtonContainer = ({ duration, currentTime }: Props): JSX.Element => (
-  <SeekBar {...{ duration, currentTime, onMouseDown, onMouseUp, onSeek }} />
-);
-
-const mapStateToProps = ({
-  superVideoState: { duration, currentTime }
-}: State): Props => ({
-  duration,
-  currentTime
-});
-
-export default connect(mapStateToProps)(PlayButtonContainer);
diff --git a/src/containers/SeekBarCurrentTimeSlider.tsx b/src/containers/SeekBarCurrentTimeSlider.tsx
new file mode 100644
index 0000000..26c78df
--- /dev/null
+++ b/src/containers/SeekBarCurrentTimeSlider.tsx
@@ -0,0 +1,53 @@
+import React from 'react';
+import { connect } from 'react-redux';
+import { State } from '../types/state';
+import SeekBarSliderComponent from '../components/SeekBarSlider';
+import store from '../store';
+import { setCurrentTime, setUserSeek } from '../actionCreators';
+
+interface Props {
+  duration: number;
+  currentTime: number;
+  userSeek: boolean;
+}
+
+function createOnSeek(duration: number): (currentPosition: number) => void {
+  return (currentPosition: number): void => {
+    store.dispatch(setCurrentTime(duration * currentPosition / 100));
+  };
+}
+
+function onMouseDown(): void {
+  store.dispatch(setUserSeek(true));
+}
+
+function onMouseUp(): void {
+  store.dispatch(setUserSeek(false));
+}
+
+const SeekBarCurrentTimeSlider = ({
+  currentTime,
+  duration,
+  userSeek
+}: Props): JSX.Element => (
+    <SeekBarSliderComponent
+      {...{
+        position: (currentTime / duration) * 100,
+        className: 'slider-current-time',
+        userSeek,
+        onSeek: createOnSeek(duration),
+        onMouseDown,
+        onMouseUp
+      }}
+    />
+  );
+
+const mapStateToProps = ({
+  superVideoState: { duration, currentTime, userSeek }
+}: State): Props => ({
+  duration,
+  currentTime,
+  userSeek
+});
+
+export default connect(mapStateToProps)(SeekBarCurrentTimeSlider);
diff --git a/src/interactivity/slider-interactivity-props.ts b/src/interactivity/slider-interactivity-props.ts
new file mode 100644
index 0000000..9deca56
--- /dev/null
+++ b/src/interactivity/slider-interactivity-props.ts
@@ -0,0 +1,95 @@
+export type OnDragFunc = (xCoor: number, yCoor: number) => void;
+
+export interface DraggableProps {
+    exist: boolean;
+    callbacks: {
+        onDragBegin: OnDragFunc;
+        onDrag: OnDragFunc;
+        onDragEnd: OnDragFunc;
+    };
+}
+
+export interface InteractivityProps {
+    target: HTMLDivElement;
+    draggable: DraggableProps;
+}
+
+export const DEFAULT_TAG_INTERACTIVITY_PROPS: InteractivityProps = {
+    target: undefined,
+    draggable: {
+        exist: false,
+        callbacks: {
+            onDragBegin: undefined,
+            onDrag: undefined,
+            onDragEnd: undefined
+        }
+    }
+};
+
+export const updateDraggable = (
+    prevState: InteractivityProps,
+    draggable: boolean
+): InteractivityProps => {
+    if (
+        prevState.draggable.exist === draggable
+    )
+        return prevState;
+    return {
+        ...prevState,
+        draggable: {
+            ...prevState.draggable,
+            exist: draggable
+        }
+    };
+};
+
+export const updateOnDragBegin = (
+    prevState: InteractivityProps,
+    onDragBegin: OnDragFunc
+): InteractivityProps => {
+    if (prevState.draggable.callbacks.onDragBegin) return prevState;
+    return {
+        ...prevState,
+        draggable: {
+            ...prevState.draggable,
+            callbacks: {
+                ...prevState.draggable.callbacks,
+                onDragBegin
+            }
+        }
+    };
+};
+
+export const updateOnDrag = (
+    prevState: InteractivityProps,
+    onDrag: OnDragFunc
+): InteractivityProps => {
+    if (prevState.draggable.callbacks.onDrag) return prevState;
+    return {
+        ...prevState,
+        draggable: {
+            ...prevState.draggable,
+            callbacks: {
+                ...prevState.draggable.callbacks,
+                onDrag
+            }
+        }
+    };
+};
+
+export const updateOnDragEnd = (
+    prevState: InteractivityProps,
+    onDragEnd: OnDragFunc
+): InteractivityProps => {
+    if (prevState.draggable.callbacks.onDragEnd) return prevState;
+    return {
+        ...prevState,
+        draggable: {
+            ...prevState.draggable,
+            callbacks: {
+                ...prevState.draggable.callbacks,
+                onDragEnd
+            }
+        }
+    };
+};
\ No newline at end of file
diff --git a/src/interactivity/slider-interactivity.ts b/src/interactivity/slider-interactivity.ts
new file mode 100644
index 0000000..9cff1e7
--- /dev/null
+++ b/src/interactivity/slider-interactivity.ts
@@ -0,0 +1,102 @@
+import { Draggable } from 'gsap/Draggable';
+import { InteractivityProps } from './slider-interactivity-props';
+
+export interface Interactivity {
+    draggable: Draggable;
+}
+
+type UpdateInteractivityFunc = (
+    prevInteractivity: Interactivity
+) => Interactivity;
+
+
+
+
+const getNormalizedLeftTopPos = (
+    pointerEvent: HTMLDivElement
+): { x: number; y: number } => {
+    const dragOnRect = pointerEvent.parentElement.getBoundingClientRect();
+    const draggedRect = pointerEvent.getBoundingClientRect();
+    const relativeX = draggedRect.left - dragOnRect.left;
+    const relativeY = draggedRect.top - dragOnRect.top;
+    const relativeNormalizedX = (relativeX / dragOnRect.width) * 100;
+    const relativeNormalizedY = (relativeY / dragOnRect.height) * 100;
+    return { x: relativeNormalizedX, y: relativeNormalizedY };
+};
+
+
+export const updatedDraggable = (
+    draggable: Draggable,
+    prevState: InteractivityProps,
+    newState: InteractivityProps
+): Draggable => {
+    let newDraggable = draggable;
+
+    if (prevState === newState) return newDraggable;
+
+    const { draggable: prevExistance, target: prevTarget } = prevState;
+    const { draggable: newExistance, target: newTarget } = newState;
+
+    if (prevExistance !== newExistance) {
+        const { exist: newIsDraggable, callbacks: newCallbacks } = newExistance;
+
+        if (newDraggable) {
+            newDraggable.kill();
+
+            newDraggable = undefined;
+        }
+
+        if (newIsDraggable) {
+            const {
+                onDragBegin: onPress,
+                onDragEnd: onRelease,
+                onDrag
+            } = newCallbacks;
+
+            [newDraggable] = Draggable.create(newTarget, {
+                dragClickables: true,
+                bounds: '#seek-bounds',
+                type: 'x',
+                onPress: (pointerEvent: React.MouseEvent<HTMLDivElement>): void => {
+                    const pos = getNormalizedLeftTopPos(newTarget);
+                    if (onPress) onPress(pos.x, pos.y);
+                },
+                onRelease: (pointerEvent: React.MouseEvent<HTMLDivElement>): void => {
+                    const pos = getNormalizedLeftTopPos(newTarget);
+                    if (onRelease) onRelease(pos.x, pos.y);
+                },
+                onDrag: (pointerEvent: React.MouseEvent<HTMLDivElement>): void => {
+                    const pos = getNormalizedLeftTopPos(newTarget);
+                    if (onDrag) onDrag(pos.x, pos.y);
+                },
+                onClick: (e: PointerEvent): void => {
+                    e.stopPropagation();
+                }
+            });
+        }
+        return newDraggable;
+    }
+
+    if (newDraggable && prevTarget !== newTarget) newDraggable.target = newTarget;
+
+    return newDraggable;
+};
+
+export const updateInteractivity = (
+    prevState: InteractivityProps,
+    newState: InteractivityProps
+): UpdateInteractivityFunc => (
+    prevInteractivity: Interactivity
+): Interactivity => {
+        const { draggable } = prevInteractivity;
+
+        let newInteractivity = prevInteractivity;
+
+        const newDraggable = updatedDraggable(draggable, prevState, newState);
+
+        if (newDraggable !== draggable)
+            newInteractivity = { ...newInteractivity, draggable: newDraggable };
+
+
+        return newInteractivity;
+    };
\ No newline at end of file
diff --git a/src/tag-interactivity/tag-interactivity-props.ts b/src/interactivity/tag-interactivity-props.ts
similarity index 100%
rename from src/tag-interactivity/tag-interactivity-props.ts
rename to src/interactivity/tag-interactivity-props.ts
diff --git a/src/tag-interactivity/tag-interactivity.ts b/src/interactivity/tag-interactivity.ts
similarity index 100%
rename from src/tag-interactivity/tag-interactivity.ts
rename to src/interactivity/tag-interactivity.ts
diff --git a/src/reducers/default-state.ts b/src/reducers/default-state.ts
index fe1ba0e..fafaf92 100644
--- a/src/reducers/default-state.ts
+++ b/src/reducers/default-state.ts
@@ -2,7 +2,7 @@ import { State } from '../types/state';
 
 const DEFAULT_STATE: State = {
   superVideoState: {
-    duration: 10,
+    duration: 20,
     playback: false,
     currentTime: 0,
     url: 'http://localhost:9000/video',
diff --git a/src/style.scss b/src/style.scss
index c8849e2..78bb085 100644
--- a/src/style.scss
+++ b/src/style.scss
@@ -46,3 +46,58 @@
   overflow-y: scroll;
   height: 70vh;
 }
+
+.seek-bar-box {
+  margin-top: 15px;
+}
+.ribbon {
+  border-radius: 3px;
+  background-color: lightblue;
+  height: 7px;
+}
+
+.slider-ribbon {
+  height: 14px;
+  position: relative;
+}
+
+.slider-marker-begin {
+  position: absolute;
+  left: 50%;
+  width: 0;
+  height: 0;
+  border-right: 7px solid transparent;
+
+  border-top: 14px solid #f00;
+}
+
+.slider-marker-begin {
+  position: absolute;
+  left: 50%;
+  width: 0;
+  height: 0;
+  border-right: 7px solid transparent;
+
+  border-top: 14px solid #f00;
+}
+
+.slider-marker-end {
+  position: absolute;
+  left: 70%;
+  width: 0;
+  height: 0;
+  border-left: 7px solid transparent;
+
+  border-top: 14px solid #f00;
+}
+
+.slider-current-time {
+  position: absolute;
+  right: 70%;
+  width: 0;
+  height: 0;
+  border-left: 7px solid transparent;
+  border-right: 7px solid transparent;
+
+  border-bottom: 14px solid blue;
+}
\ No newline at end of file
