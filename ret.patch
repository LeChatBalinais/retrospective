diff --git a/.devcontainer/devcontainer.json b/.devcontainer/devcontainer.json
index 698186b..f9e290a 100644
--- a/.devcontainer/devcontainer.json
+++ b/.devcontainer/devcontainer.json
@@ -2,6 +2,9 @@
   "name": "Retrospective",
   "dockerFile": "Dockerfile",
   "appPort": 8080,
-  "extensions": ["dbaeumer.vscode-eslint", "prettier/prettier"],
+  "extensions": [
+    "dbaeumer.vscode-eslint",
+    "prettier.prettier"
+  ],
   "postCreateCommand": "yarn install"
-}
+}
\ No newline at end of file
diff --git a/src/components/Player.tsx b/src/components/Player.tsx
index 37dad02..a353dcf 100644
--- a/src/components/Player.tsx
+++ b/src/components/Player.tsx
@@ -3,14 +3,14 @@ import ControlPanel from './ControlPanel';
 import VideoContainer from '../containers/VideoContainer';
 import NewTagLayerContainer from '../containers/NewTagLayerContainer';
 import AugmentationContainer from '../containers/AugmentationContainer';
-import SeekBar from './SeekBar';
+import SeekBar from '../containers/SeekBar';
 
 interface Props {
   placeNewTagMode: boolean;
 }
 
 class Player extends React.Component<Props, {}> {
-  public componentDidMount(): void { }
+  public componentDidMount(): void {}
 
   public render(): JSX.Element {
     const { placeNewTagMode } = this.props;
diff --git a/src/components/SeekBar.tsx b/src/components/SeekBar.tsx
index 5924e25..ddcabab 100644
--- a/src/components/SeekBar.tsx
+++ b/src/components/SeekBar.tsx
@@ -1,18 +1,72 @@
 import React from 'react';
 import SeekBarCurrentTimeSlider from '../containers/SeekBarCurrentTimeSlider';
+import {
+  MouseListenerProps,
+  newMouseListenerProps,
+  newMouseListener
+} from '../interactivity/track-pointer-on';
 
+interface Props {
+  onMouseDown: (relativePosition: number) => void;
+  onMouseMove: (relativePosition: number) => void;
+  onMouseUp: () => void;
+}
 
+class SeekBar extends React.Component<Props, {}> {
+  public constructor(props: Props) {
+    super(props);
 
-const SeekBar = (): JSX.Element => (
+    this.setRef = (ribbon: HTMLDivElement): void => {
+      this.ribbon = ribbon;
+    };
 
-    <div className="box seek-bar-box">
-        <div className="ribbon"></div>
-        <div id="seek-bounds" className="slider-ribbon">
-            <SeekBarCurrentTimeSlider />
-        </div>
-    </div>
+    this.getTarget = (): HTMLDivElement => {
+      return this.ribbon;
+    };
+  }
+
+  private setRef: (ribbon: HTMLDivElement) => void;
+
+  private getTarget: () => HTMLDivElement;
+
+  private mouseListenerProps: MouseListenerProps;
 
+  private mouseDownListener: (
+    event: React.MouseEvent<HTMLDivElement, MouseEvent>
+  ) => void;
 
+  private ribbon: HTMLDivElement;
 
-);
+  public render(): JSX.Element {
+    const { onMouseDown, onMouseUp, onMouseMove } = this.props;
+
+    const newProps = newMouseListenerProps(
+      onMouseUp,
+      onMouseDown,
+      onMouseMove,
+      this.getTarget,
+      this.mouseListenerProps
+    );
+
+    this.mouseDownListener = newMouseListener(
+      this.mouseListenerProps,
+      newProps,
+      this.mouseDownListener
+    );
+
+    return (
+      <div className="box seek-bar-box">
+        <div className="ribbon-container">
+          {/* eslint-disable-next-line */}
+          <div
+            className="ribbon"
+            ref={this.setRef}
+            onMouseDown={this.mouseDownListener}
+          />
+          <SeekBarCurrentTimeSlider />
+        </div>
+      </div>
+    );
+  }
+}
 export default SeekBar;
diff --git a/src/components/SeekBarSlider.tsx b/src/components/SeekBarSlider.tsx
index 83d5b94..7b116b4 100644
--- a/src/components/SeekBarSlider.tsx
+++ b/src/components/SeekBarSlider.tsx
@@ -1,119 +1,23 @@
 import React from 'react';
-import {
-  Interactivity,
-  updateInteractivity
-} from '../interactivity/slider-interactivity';
-import {
-  InteractivityProps,
-  DEFAULT_TAG_INTERACTIVITY_PROPS,
-  updateDraggable,
-  updateOnDrag,
-  updateOnDragBegin,
-  updateOnDragEnd
-} from '../interactivity/slider-interactivity-props';
 
 type onSeekFunc = (currentTime: number) => void;
 
 interface Props {
   position: number;
   className: string;
-  onSeek: onSeekFunc;
-  userSeek: boolean;
-  onMouseDown: () => void;
-  onMouseUp: () => void;
 }
 
 class SeekBarSlider extends React.Component<Props, {}> {
-  public constructor(props: Props) {
-    super(props);
-
-    this.interactivityProps = DEFAULT_TAG_INTERACTIVITY_PROPS;
-    this.updateDraggable = true;
-  }
-
-  public componentDidMount(): void {
-    this.interactivity = { draggable: undefined };
-
-    this.interactivity = updateInteractivity(
-      this.prevInteractivityProps,
-      this.interactivityProps
-    )(this.interactivity);
-  }
-
-  public componentDidUpdate(): void {
-    if (this.updateDraggable) {
-      if (this.interactivity) {
-        const { interactivity } = this
-        if (interactivity.draggable) {
-
-          console.log(this.interactivityProps.target);
-          interactivity.draggable.update();
-        }
-      };
-    }
-  }
-
-  private updateDraggable: boolean;
-
-  private interactivityProps: InteractivityProps;
-
-  private interactivity: Interactivity;
-
-  private prevInteractivityProps: InteractivityProps;
-
-  private position: number;
+  private setRef: (slider: HTMLDivElement) => void;
 
   public render(): JSX.Element {
-    const {
-      className,
-      position,
-      userSeek,
-      onMouseDown: onDragBegin,
-      onMouseUp: onDragEnd,
-      onSeek: onDrag
-    } = this.props;
-
-    this.prevInteractivityProps = this.interactivityProps;
-
-    this.interactivityProps = updateDraggable(this.interactivityProps, true);
-
-    this.interactivityProps = updateOnDragBegin(
-      this.interactivityProps,
-      onDragBegin
-    );
-    this.interactivityProps = updateOnDrag(this.interactivityProps, onDrag);
-    this.interactivityProps = updateOnDragEnd(
-      this.interactivityProps,
-      onDragEnd
-    );
-
-
+    const { className, position } = this.props;
 
-    let style;
-    if (userSeek) {
-      this.updateDraggable = false;
-      style = { left: `${this.position}%` };
-    }
-    else {
-      this.updateDraggable = true;
-      this.position = position
-      style = { left: `${position}%`, transform: `translate3d(0px,0px,0px)` }
-      console.log(style)
-    }
+    const style = {
+      left: `${position}%`
+    };
 
-    return (
-      <div
-        {...{ className }}
-        style={style}
-        ref={(slider: HTMLDivElement): void => {
-          this.interactivityProps = {
-            ...this.interactivityProps,
-            target: slider
-          };
-          console.log("ref")
-        }}
-      />
-    );
+    return <div {...{ className }} style={style} ref={this.setRef} />;
   }
 }
 
diff --git a/src/containers/SeekBar.tsx b/src/containers/SeekBar.tsx
new file mode 100644
index 0000000..fbc4f9c
--- /dev/null
+++ b/src/containers/SeekBar.tsx
@@ -0,0 +1,33 @@
+import React from 'react';
+import { connect } from 'react-redux';
+import store from '../store';
+import { State } from '../types/state';
+import SeekBarComponent from '../components/SeekBar';
+import { setCurrentTime, setUserSeek } from '../actionCreators';
+
+interface Props {
+  duration: number;
+}
+
+const SeekBar = ({ duration }: Props): JSX.Element => {
+  return (
+    <SeekBarComponent
+      onMouseDown={(relativePosition: number): void => {
+        store.dispatch(setUserSeek(true));
+        store.dispatch(setCurrentTime(duration * (relativePosition / 100)));
+      }}
+      onMouseUp={(): void => {
+        store.dispatch(setUserSeek(false));
+      }}
+      onMouseMove={(relativePosition: number): void => {
+        store.dispatch(setCurrentTime(duration * (relativePosition / 100)));
+      }}
+    />
+  );
+};
+
+const mapStateToProps = ({ superVideoState: { duration } }: State): Props => ({
+  duration
+});
+
+export default connect(mapStateToProps)(SeekBar);
diff --git a/src/containers/SeekBarCurrentTimeSlider.tsx b/src/containers/SeekBarCurrentTimeSlider.tsx
index 26c78df..d682048 100644
--- a/src/containers/SeekBarCurrentTimeSlider.tsx
+++ b/src/containers/SeekBarCurrentTimeSlider.tsx
@@ -2,52 +2,29 @@ import React from 'react';
 import { connect } from 'react-redux';
 import { State } from '../types/state';
 import SeekBarSliderComponent from '../components/SeekBarSlider';
-import store from '../store';
-import { setCurrentTime, setUserSeek } from '../actionCreators';
 
 interface Props {
   duration: number;
   currentTime: number;
-  userSeek: boolean;
-}
-
-function createOnSeek(duration: number): (currentPosition: number) => void {
-  return (currentPosition: number): void => {
-    store.dispatch(setCurrentTime(duration * currentPosition / 100));
-  };
-}
-
-function onMouseDown(): void {
-  store.dispatch(setUserSeek(true));
-}
-
-function onMouseUp(): void {
-  store.dispatch(setUserSeek(false));
 }
 
 const SeekBarCurrentTimeSlider = ({
   currentTime,
-  duration,
-  userSeek
+  duration
 }: Props): JSX.Element => (
-    <SeekBarSliderComponent
-      {...{
-        position: (currentTime / duration) * 100,
-        className: 'slider-current-time',
-        userSeek,
-        onSeek: createOnSeek(duration),
-        onMouseDown,
-        onMouseUp
-      }}
-    />
-  );
+  <SeekBarSliderComponent
+    {...{
+      position: (currentTime / duration) * 100,
+      className: 'slider-current-time'
+    }}
+  />
+);
 
 const mapStateToProps = ({
-  superVideoState: { duration, currentTime, userSeek }
+  superVideoState: { duration, currentTime }
 }: State): Props => ({
   duration,
-  currentTime,
-  userSeek
+  currentTime
 });
 
 export default connect(mapStateToProps)(SeekBarCurrentTimeSlider);
diff --git a/src/interactivity/slider-interactivity-props.ts b/src/interactivity/slider-interactivity-props.ts
deleted file mode 100644
index 9deca56..0000000
--- a/src/interactivity/slider-interactivity-props.ts
+++ /dev/null
@@ -1,95 +0,0 @@
-export type OnDragFunc = (xCoor: number, yCoor: number) => void;
-
-export interface DraggableProps {
-    exist: boolean;
-    callbacks: {
-        onDragBegin: OnDragFunc;
-        onDrag: OnDragFunc;
-        onDragEnd: OnDragFunc;
-    };
-}
-
-export interface InteractivityProps {
-    target: HTMLDivElement;
-    draggable: DraggableProps;
-}
-
-export const DEFAULT_TAG_INTERACTIVITY_PROPS: InteractivityProps = {
-    target: undefined,
-    draggable: {
-        exist: false,
-        callbacks: {
-            onDragBegin: undefined,
-            onDrag: undefined,
-            onDragEnd: undefined
-        }
-    }
-};
-
-export const updateDraggable = (
-    prevState: InteractivityProps,
-    draggable: boolean
-): InteractivityProps => {
-    if (
-        prevState.draggable.exist === draggable
-    )
-        return prevState;
-    return {
-        ...prevState,
-        draggable: {
-            ...prevState.draggable,
-            exist: draggable
-        }
-    };
-};
-
-export const updateOnDragBegin = (
-    prevState: InteractivityProps,
-    onDragBegin: OnDragFunc
-): InteractivityProps => {
-    if (prevState.draggable.callbacks.onDragBegin) return prevState;
-    return {
-        ...prevState,
-        draggable: {
-            ...prevState.draggable,
-            callbacks: {
-                ...prevState.draggable.callbacks,
-                onDragBegin
-            }
-        }
-    };
-};
-
-export const updateOnDrag = (
-    prevState: InteractivityProps,
-    onDrag: OnDragFunc
-): InteractivityProps => {
-    if (prevState.draggable.callbacks.onDrag) return prevState;
-    return {
-        ...prevState,
-        draggable: {
-            ...prevState.draggable,
-            callbacks: {
-                ...prevState.draggable.callbacks,
-                onDrag
-            }
-        }
-    };
-};
-
-export const updateOnDragEnd = (
-    prevState: InteractivityProps,
-    onDragEnd: OnDragFunc
-): InteractivityProps => {
-    if (prevState.draggable.callbacks.onDragEnd) return prevState;
-    return {
-        ...prevState,
-        draggable: {
-            ...prevState.draggable,
-            callbacks: {
-                ...prevState.draggable.callbacks,
-                onDragEnd
-            }
-        }
-    };
-};
\ No newline at end of file
diff --git a/src/interactivity/slider-interactivity.ts b/src/interactivity/slider-interactivity.ts
deleted file mode 100644
index 9cff1e7..0000000
--- a/src/interactivity/slider-interactivity.ts
+++ /dev/null
@@ -1,102 +0,0 @@
-import { Draggable } from 'gsap/Draggable';
-import { InteractivityProps } from './slider-interactivity-props';
-
-export interface Interactivity {
-    draggable: Draggable;
-}
-
-type UpdateInteractivityFunc = (
-    prevInteractivity: Interactivity
-) => Interactivity;
-
-
-
-
-const getNormalizedLeftTopPos = (
-    pointerEvent: HTMLDivElement
-): { x: number; y: number } => {
-    const dragOnRect = pointerEvent.parentElement.getBoundingClientRect();
-    const draggedRect = pointerEvent.getBoundingClientRect();
-    const relativeX = draggedRect.left - dragOnRect.left;
-    const relativeY = draggedRect.top - dragOnRect.top;
-    const relativeNormalizedX = (relativeX / dragOnRect.width) * 100;
-    const relativeNormalizedY = (relativeY / dragOnRect.height) * 100;
-    return { x: relativeNormalizedX, y: relativeNormalizedY };
-};
-
-
-export const updatedDraggable = (
-    draggable: Draggable,
-    prevState: InteractivityProps,
-    newState: InteractivityProps
-): Draggable => {
-    let newDraggable = draggable;
-
-    if (prevState === newState) return newDraggable;
-
-    const { draggable: prevExistance, target: prevTarget } = prevState;
-    const { draggable: newExistance, target: newTarget } = newState;
-
-    if (prevExistance !== newExistance) {
-        const { exist: newIsDraggable, callbacks: newCallbacks } = newExistance;
-
-        if (newDraggable) {
-            newDraggable.kill();
-
-            newDraggable = undefined;
-        }
-
-        if (newIsDraggable) {
-            const {
-                onDragBegin: onPress,
-                onDragEnd: onRelease,
-                onDrag
-            } = newCallbacks;
-
-            [newDraggable] = Draggable.create(newTarget, {
-                dragClickables: true,
-                bounds: '#seek-bounds',
-                type: 'x',
-                onPress: (pointerEvent: React.MouseEvent<HTMLDivElement>): void => {
-                    const pos = getNormalizedLeftTopPos(newTarget);
-                    if (onPress) onPress(pos.x, pos.y);
-                },
-                onRelease: (pointerEvent: React.MouseEvent<HTMLDivElement>): void => {
-                    const pos = getNormalizedLeftTopPos(newTarget);
-                    if (onRelease) onRelease(pos.x, pos.y);
-                },
-                onDrag: (pointerEvent: React.MouseEvent<HTMLDivElement>): void => {
-                    const pos = getNormalizedLeftTopPos(newTarget);
-                    if (onDrag) onDrag(pos.x, pos.y);
-                },
-                onClick: (e: PointerEvent): void => {
-                    e.stopPropagation();
-                }
-            });
-        }
-        return newDraggable;
-    }
-
-    if (newDraggable && prevTarget !== newTarget) newDraggable.target = newTarget;
-
-    return newDraggable;
-};
-
-export const updateInteractivity = (
-    prevState: InteractivityProps,
-    newState: InteractivityProps
-): UpdateInteractivityFunc => (
-    prevInteractivity: Interactivity
-): Interactivity => {
-        const { draggable } = prevInteractivity;
-
-        let newInteractivity = prevInteractivity;
-
-        const newDraggable = updatedDraggable(draggable, prevState, newState);
-
-        if (newDraggable !== draggable)
-            newInteractivity = { ...newInteractivity, draggable: newDraggable };
-
-
-        return newInteractivity;
-    };
\ No newline at end of file
diff --git a/src/interactivity/track-pointer-on.ts b/src/interactivity/track-pointer-on.ts
new file mode 100644
index 0000000..0df8d84
--- /dev/null
+++ b/src/interactivity/track-pointer-on.ts
@@ -0,0 +1,74 @@
+export interface MouseListenerProps {
+  onMouseUp: () => void;
+
+  onMouseDown: (relativePosition: number) => void;
+
+  onMouseMove: (relativePosition: number) => void;
+
+  getTarget: () => HTMLDivElement;
+}
+
+export function newMouseListenerProps(
+  onMouseUp: () => void,
+  onMouseDown: (relativePosition: number) => void,
+  onMouseMove: (relativePosition: number) => void,
+  getTarget: () => HTMLDivElement,
+  prevMouseListenerProps: MouseListenerProps
+): MouseListenerProps {
+  let newProps = prevMouseListenerProps;
+
+  if (!prevMouseListenerProps)
+    return { onMouseUp, onMouseDown, onMouseMove, getTarget };
+
+  if (onMouseUp !== prevMouseListenerProps.onMouseUp)
+    newProps = { onMouseUp, ...prevMouseListenerProps };
+
+  if (onMouseDown !== prevMouseListenerProps.onMouseDown)
+    newProps = { onMouseDown, ...prevMouseListenerProps };
+
+  if (onMouseMove !== prevMouseListenerProps.onMouseMove)
+    newProps = { onMouseMove, ...prevMouseListenerProps };
+
+  if (getTarget !== prevMouseListenerProps.getTarget)
+    newProps = { getTarget, ...prevMouseListenerProps };
+
+  return newProps;
+}
+
+export function newMouseListener(
+  prevProps: MouseListenerProps,
+  newProps: MouseListenerProps,
+  prevListener: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void
+): (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void {
+  if (prevProps === newProps && prevListener) return prevListener;
+
+  const mouseMoveListener = (e: MouseEvent): void => {
+    const ribbonRect = newProps.getTarget().getBoundingClientRect();
+
+    let relativePosition =
+      ((e.clientX - ribbonRect.left) / ribbonRect.width) * 100;
+
+    if (relativePosition < 0) relativePosition = 0;
+    else if (relativePosition > 100) relativePosition = 100;
+
+    newProps.onMouseMove(relativePosition);
+  };
+
+  const mouseUpListener = (): void => {
+    document.removeEventListener('mousemove', mouseMoveListener);
+    document.removeEventListener('mouseup', mouseUpListener);
+    newProps.onMouseUp();
+  };
+
+  return (event: React.MouseEvent<HTMLDivElement, MouseEvent>): void => {
+    const ribbonRect = newProps.getTarget().getBoundingClientRect();
+
+    const relativePosition =
+      ((event.clientX - ribbonRect.left) / ribbonRect.width) * 100;
+
+    document.addEventListener('mousemove', mouseMoveListener);
+    document.addEventListener('mouseup', mouseUpListener);
+
+    newProps.onMouseDown(relativePosition);
+  };
+}
diff --git a/src/style.scss b/src/style.scss
index 78bb085..4c2a864 100644
--- a/src/style.scss
+++ b/src/style.scss
@@ -1,5 +1,13 @@
 @import '~bulma/bulma';
 
+body {
+  -webkit-touch-callout: none;
+  -webkit-user-select: none;
+  -khtml-user-select: none;
+  -moz-user-select: none;
+  -ms-user-select: none;
+  user-select: none;
+}
 .main-video {
   width: 100%;
   height: 100%;
@@ -50,25 +58,17 @@
 .seek-bar-box {
   margin-top: 15px;
 }
-.ribbon {
-  border-radius: 3px;
-  background-color: lightblue;
-  height: 7px;
-}
 
-.slider-ribbon {
-  height: 14px;
+.ribbon-container {
   position: relative;
 }
-
-.slider-marker-begin {
-  position: absolute;
-  left: 50%;
-  width: 0;
-  height: 0;
-  border-right: 7px solid transparent;
-
-  border-top: 14px solid #f00;
+.ribbon {
+  padding-left: 7px;
+  padding-right: 7px;
+  height: 14px;
+  border-radius: 3px;
+  background-color: lightblue;
+  cursor: pointer;
 }
 
 .slider-marker-begin {
@@ -93,11 +93,8 @@
 
 .slider-current-time {
   position: absolute;
-  right: 70%;
-  width: 0;
-  height: 0;
-  border-left: 7px solid transparent;
-  border-right: 7px solid transparent;
-
-  border-bottom: 14px solid blue;
-}
\ No newline at end of file
+  background-color: darkblue;
+  top: 0%;
+  width: 14px;
+  height: 14px;
+}
